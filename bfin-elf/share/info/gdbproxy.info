This is /home/comptest/rpmbuild/BUILD/blackfin-toolchain-2014R1/gdbproxy/gdbproxy.info, produced by makeinfo version 4.13 from /home/comptest/rpmbuild/BUILD/blackfin-toolchain-2014R1/gdbproxy/gdbproxy.texi.

START-INFO-DIR-ENTRY
* Remote Proxy: (gdbproxy).       Proxy server using the remote GDB protocol.
END-INFO-DIR-ENTRY

   Copyright (C) 1999 Quality Quorum, Inc.  Copyright (C) 2002 Chris
Liechti and Steve Underwood Copyright (C) 2008 Analog Devices, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: gdbproxy.info,  Node: Top,  Next: Introduction,  Up: (dir)

Top
***

This brief manual contains preliminary documentation for the GDB Remote
Proxy Server or gdbproxy (collectively version 0.7.2):

* Menu:

* Introduction::                           General introduction into gdbproxy
                                           functionality.
* Invoking gdbproxy::                      Command options supported by
                                           gdbproxy.
* Monitor commands::                       Monitors commands for gdbproxy.
* Target `bfin'::			   Description of the `bfin' target.
* Targets `remote' and `extended-remote':: Description of `remote' and
                                           `extended-remote' targets.
* Target `skeleton'::			   Description of the `skeleton' target.
* Index::                                  Index.


File: gdbproxy.info,  Node: Introduction,  Next: Invoking gdbproxy,  Prev: Top,  Up: Top

1 Introduction
**************

The  `gdbproxy' program is a gdbvsever-like application for embedded
environment. The main purpose of `gdbproxy' is it allow truly remote
debugging working as an integral part of the set of utilities called
Labslave. It is supposed to be run on the computer located near a system
being debugged. It communicates with debugger over net using standard
GDP remote protocol. It incorporates a number of targets which allow it
to hook up a system being debugged.

   There are number of established ways to do remote debugging, let us
compare the `gdbproxy' with a terminal server and with telnetting into
the lab machine.

   Comparing to a terminal server `gdbproxy' has the following
advantages: (1)terminal server supports only one target, (2)lab machine
could be used for a wide variety of tasks, for example it can provide
bootp, nfs and syslog services for a device under debugging, (3) other
components of a lab slave could be run on the same lab machine.

   Comparing to a telnetting into lab machine the `gdbproxy' has the
following advantages: (1) it does not require lab machine to mount
source directories (it reduces administrative needs of a lab machine
and its bandwidth rquirements), (2) its bandwidth requitrements are
low, debugger is more responsive and its traffic could be easily
encrypted, so remote device could be truly debugged across the open
(and slow) Internet.

   Also the `gdbproxy' has the unique advantage of merging cross
platform problems. For example if one has GNU developement environment
running on SUN and particular ICE (e.g. wiggler) is accessible only
from WinNT. Then one could use WinNT port of the Labslave on the lab
machine and effectively use remote debugger on SUNs.

   The `gdbproxy' does not require to be configured and it is able to
support wide variety of processors and debugging instruments in the
same image.


File: gdbproxy.info,  Node: Invoking gdbproxy,  Next: Monitor commands,  Prev: Introduction,  Up: Top

2 Invoking gdbproxy
*******************

     gdbproxy [--copying] [--daemon] [--debug] [--help] [--port=PORT] [--version]
     [--warranty] [TARGET [TARGET-OPTIONS] [TARGET-ARGUMENTS]]

   The `gdbproxy' listens of remote GDB protocol commands on the socket
port, translate requests into approriate commands for the target,
translated target responses to the GBP protocol commands and send them
back to the debugger.

`--copying'
     Print information about distributing the `gdbproxy' and exit.

`--daemon'
     Start `gdbproxy' as a daemon.

`--debug'
     Run the `gdbproxy' in debug mode.

`--help'
     Print help message and list of supported targets and exit.

`--port=PORT'
     The `gdbproxy' will listen on specified port, otherwise it will use
     available port. In all cases the `gdbproxy' will print port being
     used on standard output

`--version'
     Print current version and exit.

`--warranty'
     Print NO WARRANTY details and exit.

`TARGET'
     Target name. It is required unless either -help, -version,
     -warranty, -copying are specified. `gdbproxy --help' TARGET-X
     prints help for TARGET-X.

`TARGET-OPTIONS'
     Options for target.

`TARGET-ARGUMENTS'
     Non-option arguments for target.



File: gdbproxy.info,  Node: Monitor commands,  Next: Target `bfin',  Prev: Invoking gdbproxy,  Up: Top

3 Monitor commands
******************

During a `GDB' session using `gdbproxy', several monitor commands can
be used to send special requests to `gdbproxy'.  Here are the available
target independent commands.

`monitor help'
     Print the available monitor commands, both target independent and
     target dependent ones.

`monitor set debug LEVEL'
     Set the debug level of `gdbproxy', which controls how much debug
     information printed out by `gdbproxy'. LEVEL could be 0, 1, 2, and
     3.



File: gdbproxy.info,  Node: Target `bfin',  Next: Targets `remote' and `extended-remote',  Prev: Monitor commands,  Up: Top

4 Target `bfin'
***************

     gdbproxy [PROXY-OPTIONS] bfin [--board=BOARD]
         [--enable-dcache=METHOD]
         [--enable-icache] [--flash-size=BYTES] [--force-range-wp]
         [--frequency=FREQUENCY]
         [--init-sdram] [--loop-wait=USEC] [--no-auto-switch]
         [--reset] [--sdram-size=BYTES] [--unlock-on-connect]
         [--unlock-on-load] [--use-dma] [--wait-emuready]

   The target `bfin' is using JTAG cable to debug Blackfin processor of
Analog Devices, Inc. Currently, it only supports IGLOO JTAG cable,
which is a parallel port JTAG ICE and compatible with WIGGLER JTAG
cable.

`--board=BOARD'
     Specify the board. The BOARD can be one of `bf533-stamp',
     `bf533-ezkit', `bf537-stamp', `bf537-ezkit', `bf548-ezkit', and
     `bf561-ezkit'.  With this option, `gdbproxy' will set appropriate
     SDRAM size and flash size according the board choosed.

`--enable-dcache=METHOD'
     Enable all data SRAM caches. The METHOD can be one of
     `write-through' and `write-back'. Default DCPLB entries will be
     set up. One DCPLB entry will be used for L1 Bank A Data SRAM.  One
     DCPLB entry will be used for L1 Bank B Data SRAM. Other DCPLB
     entries are used for SDRAM. `56MB' SDRAM are covered by each DCPLB
     covering `4MB'.

`--enable-icache'
     Enable all instruction SRAM caches. Default ICPLB entries will be
     set up. One ICPLB entry will be used for L1 Instruction SRAM.
     Other ICPLB entries are used for SDRAM. `60MB' SDRAM are covered
     by each ICPLB entry covering `4MB'.

`--flash-size=BYTES'
     Specify the size of flash in bytes. This option overrides the value
     set by `--board'.

`--force-range-wp'
     Always use range hardware watchpoint. Without this option,
     `gdbproxy' will only use range hardware watchpoint for data size
     larger than 4 bytes, such that we can set up to two hardware
     watchpoints with data size less than or equal to 4 bytes.  The
     watchpoint unit of Blackfin processor triggers emulation event
     only when the address on the data bus is equal to watchpoint
     address.

          struct A {
            char a;
            char b;
            char c;
            char d;
          } s;

     ``(gdb) watch s'' can catch ``s.a = 1'', but can't catch ``s.b =
     1''. If you want to catch writes to all fields of `s', you can use
     `--force-range-wp'. The cost is that you can only set one hardware
     watchpoint.

`--frequency=FREQUENCY'
     Set cable frequency.  Usually gdbproxy uses the max frequency of
     the cable.  The max frequency of gnICE+ JTAG ICE cable is
     30000000Hz. But some boards can only work under 15000000Hz.  In
     this case you can use this option to specify a working frequency.

`--init-sdram'
     Initialize SDRAM or DDR memory. The default SDRAM configuration
     `gdbproxy' set doesn't has the best performance but maximum
     flexibility for a large range of system clock frequency.
     `gdbproxy' uses different configuration for each board.  So
     `gdbproxy' will report an error if you pass `--init-sdram' but
     don't provide `--board'.

`--loop-wait=USEC'
     Wait USEC microseconds in wait loop. The default wait time is
     10000 microseconds. After resume, `gdbproxy' waits USEC to see if
     there is any event in the processor should be reported to gdb.
     USEC can be `0'.

`--no-auto-switch'
     Normally, if you are trying to set `PC' register with an address
     which belongs to the L1 memory of a core other than the current
     one, `gdbproxy' will automatically switch the current core to that
     core and set the address in the `PC' register of that core if that
     core is not locked or core fault. The switch is done silently.
     There will be no notice to user until the next stop.  This option
     tells `gdbproxy' not to automatically switch to the core whose L1
     memory contains the address you set to `PC' register.

`--reset'
     Do a core and system reset when gdb connects. `gdbproxy' will
     automatically do a core and system reset when Blackfin processor
     has core faults or in an bad state when gdb connects.  This option
     asks for a core and systemp reset when gdb connects without regard
     to the state of Blackfin processor.

`--sdram-size=BYTES'
     Specify the size of SDRAM memory. This option overrides the value
     set by `--board'.

`--unlock-on-connect'
     Unlock all locked cores when gdb connects.

`--unlock-on-load'
     Unlock the locked core when loading code to the first address of
     its L1 Instruction SRAM.

`--use-dma'
     Use DMA to access Instruction SRAM. ITEST/DTEST is used when
     possible by default. Using DMA to access Instruction SRAM is slower
     than using ITEST/DTEST. But when the latter is used, TEST_COMMAND
     is reset to 0, i.e. clobbered! But it should not do any harm to
     any reasonable user programs. Only Codes trying to peek
     TEST_COMMAND might be affected.

`--wait-emuready'
     Wait for EMUREADY in emulation operations.  After each emulator
     operation, `gdbproxy' will immediately check if Blackfin processor
     is `EMUREADY', i.e. if Blackfin processor has executed all valid
     instructions in `EMUIR' and is ready to execute the next
     instruction. Since this checking will extremely slow down USB JTAG
     ICE operation, it's default off.


File: gdbproxy.info,  Node: Targets `remote' and `extended-remote',  Next: Target `skeleton',  Prev: Target `bfin',  Up: Top

5 Targets `remote' and `extended-remote'
****************************************

     gdbproxy [PROXY-OPTIONS] remote [--debug] [--use-break]
      [--baud=BAUD] [--timeout=TIMEOUT] DEVICE
     or
     gdbproxy [PROXY-OPTIONS] extended-remote [--debug] [--use-break]
      [--baud=BAUD] [--timeout=TIMEOUT] DEVICE

   The target `remote' is using remote GDB protocol over serial line to
connect with device being debugged. Target `extended-remote' is using
extended version of the GDB protocol. Please, note if your stub does not
support remote operations, `extended-remote' is not able to detect this
due to protocol deficiency. So, `extended-remote' should be used only
with stubs which support remote operations.

`--debug'
     Run remote target in debug mode.

`--use-break'
     Send BREAK to stop device being debugged, default is to send
     Ctrl-C.

`--baud=BAUD'
     Set baud rate, default is 38400.

`--timeout=TIMEOUT'
     Set timeout, default is 2 seconds, minimal value is 1 second,
     maximum value is 3600 seconds.

`DEVICE'
     Device to be used, currently only local serial connections are
     supported.



File: gdbproxy.info,  Node: Target `skeleton',  Next: Index,  Prev: Targets `remote' and `extended-remote',  Up: Top

6 Target `skeleton'
*******************

     gdbproxy [PROXY-OPTIONS] skeleton [--debug] DRIVER


File: gdbproxy.info,  Node: Index,  Prev: Target `skeleton',  Up: Top

Index
*****

 [index ]
* Menu:

* gdbproxy:                              Introduction.          (line 6)
* labslave:                              Introduction.          (line 6)
* target:                                Introduction.          (line 6)
* version:                               Top.                   (line 6)



Tag Table:
Node: Top1036
Node: Introduction1900
Node: Invoking gdbproxy3889
Node: Monitor commands5231
Node: Target `bfin'5841
Node: Targets `remote' and `extended-remote'11345
Node: Target `skeleton'12607
Node: Index12825

End Tag Table
